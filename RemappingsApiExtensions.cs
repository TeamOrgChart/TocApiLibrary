// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamorgchart
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RemappingsApi.
    /// </summary>
    public static partial class RemappingsApiExtensions
    {
            /// <summary>
            /// Returns a list of the temporary, vacant or department chart positions
            /// defined for the chart
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// GET /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<Remapping> GetRemappings(this IRemappingsApi operations, string chartId, string version)
            {
                return operations.GetRemappingsAsync(chartId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of the temporary, vacant or department chart positions
            /// defined for the chart
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// GET /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Remapping>> GetRemappingsAsync(this IRemappingsApi operations, string chartId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRemappingsWithHttpMessagesAsync(chartId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new or updates an existing remapping in the chart.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// POST /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685
            /// [{
            /// "Id": 0,
            /// "UniqueId": "string",
            /// "FriendlyUniqueId": "string",
            /// "ManagerId": "string",
            /// "FriendlyManagerId": "string",
            /// "MappedId": "string",
            /// "FriendlyMappedId": "string"
            /// }]
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='model'>
            /// Remapping model
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Remapping AddRemapping(this IRemappingsApi operations, string chartId, Remapping model, string version)
            {
                return operations.AddRemappingAsync(chartId, model, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new or updates an existing remapping in the chart.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// POST /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685
            /// [{
            /// "Id": 0,
            /// "UniqueId": "string",
            /// "FriendlyUniqueId": "string",
            /// "ManagerId": "string",
            /// "FriendlyManagerId": "string",
            /// "MappedId": "string",
            /// "FriendlyMappedId": "string"
            /// }]
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='model'>
            /// Remapping model
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remapping> AddRemappingAsync(this IRemappingsApi operations, string chartId, Remapping model, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddRemappingWithHttpMessagesAsync(chartId, model, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a remapping from the chart.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// DELETE /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685/123456
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='remappingId'>
            /// ID of the mapping
            /// </param>
            /// <param name='version'>
            /// </param>
            public static void DeleteRemapping(this IRemappingsApi operations, string chartId, int remappingId, string version)
            {
                operations.DeleteRemappingAsync(chartId, remappingId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a remapping from the chart.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// DELETE /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685/123456
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='remappingId'>
            /// ID of the mapping
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRemappingAsync(this IRemappingsApi operations, string chartId, int remappingId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRemappingWithHttpMessagesAsync(chartId, remappingId, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
