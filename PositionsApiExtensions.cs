// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamorgchart
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PositionsApi.
    /// </summary>
    public static partial class PositionsApiExtensions
    {
            /// <summary>
            /// Returns a list of the temporary, vacant or department chart positions
            /// defined for the chart
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// GET /api/v1/positions/53bec490-1cdc-42f5-8983-e6efe66dc685
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<ChartPosition> GetChartPositions(this IPositionsApi operations, string chartId, string version)
            {
                return operations.GetChartPositionsAsync(chartId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of the temporary, vacant or department chart positions
            /// defined for the chart
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// GET /api/v1/positions/53bec490-1cdc-42f5-8983-e6efe66dc685
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChartPosition>> GetChartPositionsAsync(this IPositionsApi operations, string chartId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChartPositionsWithHttpMessagesAsync(chartId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new or updates an existing temporary, vacant or department
            /// positions in the chart.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// POST /api/v1/positions/53bec490-1cdc-42f5-8983-e6efe66dc685
            /// [{
            /// "Id": 0,
            /// "Name": "Harry Potter",
            /// "ManagerId": "xxx-eee-333-sss-",
            /// "FriendlyManagerId": "string",
            /// "Position": "string",
            /// "IsTempPosition": true,
            /// "ExpireDate": "2020-01-29T09:13:53.895Z",
            /// "UniqueId": "abc123",
            /// "ViewItem": "",
            /// "PictureUrl": "",
            /// "IsDepartment": false,
            /// "DepartmentTitle": "",
            /// "DepartmentText": ""
            /// }]
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='model'>
            /// Position model
            /// </param>
            /// <param name='version'>
            /// </param>
            public static ChartPosition CreateChartPosition(this IPositionsApi operations, string chartId, ChartPosition model, string version)
            {
                return operations.CreateChartPositionAsync(chartId, model, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new or updates an existing temporary, vacant or department
            /// positions in the chart.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// POST /api/v1/positions/53bec490-1cdc-42f5-8983-e6efe66dc685
            /// [{
            /// "Id": 0,
            /// "Name": "Harry Potter",
            /// "ManagerId": "xxx-eee-333-sss-",
            /// "FriendlyManagerId": "string",
            /// "Position": "string",
            /// "IsTempPosition": true,
            /// "ExpireDate": "2020-01-29T09:13:53.895Z",
            /// "UniqueId": "abc123",
            /// "ViewItem": "",
            /// "PictureUrl": "",
            /// "IsDepartment": false,
            /// "DepartmentTitle": "",
            /// "DepartmentText": ""
            /// }]
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='model'>
            /// Position model
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChartPosition> CreateChartPositionAsync(this IPositionsApi operations, string chartId, ChartPosition model, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateChartPositionWithHttpMessagesAsync(chartId, model, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a temporary, vacant or department position from the chart and
            /// returns a list of the remaining positions.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// DELETE /api/v1/positions/53bec490-1cdc-42f5-8983-e6efe66dc685?uniqueId=1234
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='uniqueId'>
            /// ID of the position
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<ChartPosition> DeleteChartPosition(this IPositionsApi operations, string chartId, string uniqueId, string version)
            {
                return operations.DeleteChartPositionAsync(chartId, uniqueId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a temporary, vacant or department position from the chart and
            /// returns a list of the remaining positions.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// DELETE /api/v1/positions/53bec490-1cdc-42f5-8983-e6efe66dc685?uniqueId=1234
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='uniqueId'>
            /// ID of the position
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChartPosition>> DeleteChartPositionAsync(this IPositionsApi operations, string chartId, string uniqueId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteChartPositionWithHttpMessagesAsync(chartId, uniqueId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single temporary, vacant or department position by ID.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// GET /api/v1/positions/53bec490-1cdc-42f5-8983-e6efe66dc685?uniqueId=1234
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='uniqueId'>
            /// ID of the position
            /// </param>
            /// <param name='version'>
            /// </param>
            public static ChartPosition GetChartPositionById(this IPositionsApi operations, string chartId, string uniqueId, string version)
            {
                return operations.GetChartPositionByIdAsync(chartId, uniqueId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single temporary, vacant or department position by ID.
            /// </summary>
            /// <remarks>
            /// Sample request:
            ///
            /// GET /api/v1/positions/53bec490-1cdc-42f5-8983-e6efe66dc685?uniqueId=1234
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// ID of the chart definition
            /// </param>
            /// <param name='uniqueId'>
            /// ID of the position
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChartPosition> GetChartPositionByIdAsync(this IPositionsApi operations, string chartId, string uniqueId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChartPositionByIdWithHttpMessagesAsync(chartId, uniqueId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
