// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamorgchart
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PositionsApi.
    /// </summary>
    public static partial class PositionsApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<ChartPosition> GetChartPositions(this IPositionsApi operations, string chartId, string version)
            {
                return operations.GetChartPositionsAsync(chartId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChartPosition>> GetChartPositionsAsync(this IPositionsApi operations, string chartId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChartPositionsWithHttpMessagesAsync(chartId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static ChartPosition CreateChartPosition(this IPositionsApi operations, string chartId, ChartPosition model, string version)
            {
                return operations.CreateChartPositionAsync(chartId, model, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChartPosition> CreateChartPositionAsync(this IPositionsApi operations, string chartId, ChartPosition model, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateChartPositionWithHttpMessagesAsync(chartId, model, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='uniqueId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<ChartPosition> DeleteChartPosition(this IPositionsApi operations, string chartId, string uniqueId, string version)
            {
                return operations.DeleteChartPositionAsync(chartId, uniqueId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='uniqueId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChartPosition>> DeleteChartPositionAsync(this IPositionsApi operations, string chartId, string uniqueId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteChartPositionWithHttpMessagesAsync(chartId, uniqueId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='uniqueId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static ChartPosition GetChartPositionById(this IPositionsApi operations, string chartId, string uniqueId, string version)
            {
                return operations.GetChartPositionByIdAsync(chartId, uniqueId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='uniqueId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChartPosition> GetChartPositionByIdAsync(this IPositionsApi operations, string chartId, string uniqueId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChartPositionByIdWithHttpMessagesAsync(chartId, uniqueId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
