// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamorgchart
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ChartDataApi.
    /// </summary>
    public static partial class ChartDataApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            public static string GetApiInfo(this IChartDataApi operations, string version)
            {
                return operations.GetApiInfoAsync(version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetApiInfoAsync(this IChartDataApi operations, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiInfoWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<JsonChartItemViewModel> GetChartItems(this IChartDataApi operations, string chartId, string version)
            {
                return operations.GetChartItemsAsync(chartId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonChartItemViewModel>> GetChartItemsAsync(this IChartDataApi operations, string chartId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChartItemsWithHttpMessagesAsync(chartId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static JsonChartItemViewModel CreateChartItem(this IChartDataApi operations, string chartId, object model, string version)
            {
                return operations.CreateChartItemAsync(chartId, model, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonChartItemViewModel> CreateChartItemAsync(this IChartDataApi operations, string chartId, object model, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateChartItemWithHttpMessagesAsync(chartId, model, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='uniqueId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object DeleteChartItem(this IChartDataApi operations, string chartId, string uniqueId, string version)
            {
                return operations.DeleteChartItemAsync(chartId, uniqueId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='uniqueId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteChartItemAsync(this IChartDataApi operations, string chartId, string uniqueId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteChartItemWithHttpMessagesAsync(chartId, uniqueId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='items'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<JsonChartItemViewModel> CreateChartItems(this IChartDataApi operations, string chartId, IList<object> items, string version)
            {
                return operations.CreateChartItemsAsync(chartId, items, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='items'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonChartItemViewModel>> CreateChartItemsAsync(this IChartDataApi operations, string chartId, IList<object> items, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateChartItemsWithHttpMessagesAsync(chartId, items, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='uniqueId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static JsonChartItemViewModel GetChartItem(this IChartDataApi operations, string chartId, string uniqueId, string version)
            {
                return operations.GetChartItemAsync(chartId, uniqueId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='uniqueId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonChartItemViewModel> GetChartItemAsync(this IChartDataApi operations, string chartId, string uniqueId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChartItemWithHttpMessagesAsync(chartId, uniqueId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='startValue'>
            /// </param>
            /// <param name='depth'>
            /// </param>
            public static ChartDataView GetChartView(this IChartDataApi operations, string chartId, string version, string startValue = default(string), int? depth = default(int?))
            {
                return operations.GetChartViewAsync(chartId, version, startValue, depth).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chartId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='startValue'>
            /// </param>
            /// <param name='depth'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChartDataView> GetChartViewAsync(this IChartDataApi operations, string chartId, string version, string startValue = default(string), int? depth = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChartViewWithHttpMessagesAsync(chartId, version, startValue, depth, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
